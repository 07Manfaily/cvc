useEffect(() => {
  const fetchData = async () => {
    try {
      const response = await axios.get("http://localhost:8000/get_clients");
      console.log("Réponse des clients:", response);

      if (response.status === 200) {
        const data = response.data;
        const formattedData = Object.values(data).map((item) => {
          if (Array.isArray(item.value) && item.value.length > 0) {
            return {
              "N° client SGCI": item.value[0],
              "Cluster Id": item.value[1],
              "Raison social": item.value[2],
              "Chiffre d'affaires": item.value[3],
              "Montant des engagements": item.value[4],
              "Niveau de risque": item.value[5],
              "Priorité": item.value[6],
              "Notation NOVA": item.value[7],
            };
          } else {
            return {}; // Retourne un objet vide si item.value n'est pas défini ou s'il n'est pas un tableau
          }
        });
        setClient(formattedData);
      }
    } catch (error) {
      console.log("Erreur lors du traitement:", error);
      setError("Oups !!!! erreur liée au serveur");
      console.log(
        error.response?.data || "Oups!!!! une erreur s'est produite"
      );
    }
  };

  fetchData();
}, []);






----risque---
import React, { useState, useEffect } from "react";
import DataTable from "react-data-table-component";
import { useNavigate } from "react-router-dom";
import axios from "axios";

import {
  Card,
  Stack,
  Grid,
  Box,
  Button,
} from "@mui/material";
import VisibilityIcon from "@mui/icons-material/Visibility";
import CircleRoundedIcon from "@mui/icons-material/CircleRounded";
import FilterComponent from "../utils/filter";

const Risque = () => {
  const navigate = useNavigate();
  const [client, setClient] = useState([]);
  const [error, setError] = useState("");
  const [filterText, setFilterText] = useState("");
  const [resetPaginationToggle, setResetPaginationToggle] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get("http://localhost:8000/get_clients");
        console.log("Réponse des clients:", response);

        if (response.status === 200) {
          const data = response.data;
          const formattedData = data.map((item) => ({
            "N° client SGCI": item.CLI_S_SGCI.value,
            "Cluster Id": item.FINAL_CLUSTERS.value,
            "Raison social": item.NOMREST_S.value,
            "Chiffre d'affaires": item.CA_XOF.value,
            "Montant des engagements": item.Engagement_XOF.value,
            "Niveau de risque": item.Provi_Stage_Code.value,
            "Priorité": item.Priority.value,
            "Notation NOVA": item.NOVA.value,
          }));
          setClient(formattedData);
        }
      } catch (error) {
        console.log("Erreur lors du traitement:", error);
        setError("Oups !!!! erreur liée au serveur");
        console.log(
          error.response?.data || "Oups!!!! une erreur s'est produite"
        );
      }
    };

    fetchData();
  }, []);

  const handleActionClick = (nc) => {
    navigate(`/dashboard/chaine-de-valeur/${nc}`, { replace: true });
  };

  const columns = [
    {
      name: "N° client SGCI",
      selector: (row) => row["N° client SGCI"],
      sortable: true,
    },
    {
      name: "Cluster Id",
      selector: (row) => row["Cluster Id"],
      sortable: true,
    },
    {
      name: "Raison social",
      selector: (row) => row["Raison social"],
      sortable: true,
    },
    {
      name: "Chiffre d’affaires",
      selector: (row) => row["Chiffre d’affaires"],
      sortable: true,
    },
    {
      name: "Montant des engagements",
      selector: (row) => row["Montant des engagements"],
      sortable: true,
    },
    {
      name: "Niveau de risque",
      selector: (row) => row["Niveau de risque"],
      sortable: true,
    },
    {
      name: "Priorité",
      selector: (row) => row["Priorité"],
      sortable: true,
    },
    {
      name: "Notation NOVA",
      selector: (row) => row["Notation NOVA"],
      sortable: true,
    },
    {
      name: "Action",
      button: true,
      cell: (row) => (
        <Button
          style={{ color: "black" }}
          onClick={() => handleActionClick(row["N° client SGCI"])}
        >
          <VisibilityIcon style={{ color: "#495F52", fontSize: 30 }} />
        </Button>
      ),
    },
  ];

  const subHeaderComponentMemo = (
    <FilterComponent
      onFilter={(e) => setFilterText(e.target.value)}
      onClear={() => setFilterText("")}
      filterText={filterText}
    />
  );

  const filteredItems = client.filter((item) =>
    Object.values(item).some(
      (value) =>
        typeof value === "string" &&
        value.toLowerCase().includes(filterText.toLowerCase())
    )
  );

  return (
    <>
      <Stack direction="row" justifyContent="space-between" mb={5}>
        {/* Ajoutez le titre ici si nécessaire */}
      </Stack>
      <Card>
        <DataTable
          columns={columns}
          data={filteredItems}
          pagination
          paginationResetDefaultPage={resetPaginationToggle}
          subHeader
          subHeaderComponent={subHeaderComponentMemo}
          persistTableHead
        />
      </Card>
      <Button
        size="large"
        variant="contained"
        onClick={() => setResetPaginationToggle(!resetPaginationToggle)}
      >
        Rafraîchir
      </Button>
      <Box
        sx={{
          mt: 8,
          bgcolor: "background.paper",
          boxShadow: 7,
          borderRadius: 1,
          border: 1,
          borderColor: "#e7e0e0",
        }}
      >
        <center>
          <b>
            <i>Légende</i>
          </b>
        </center>
        <Grid container sx={{ mt: 4 }}>
          <Grid
            container
            sx={{ mb: 2 }}
            direction="row"
            justifyContent="space-around"
            alignItems="flex-start"
          >
            <Grid justifyContent="flex-start" alignItems="flex-start">
              <CircleRoundedIcon style={{ color: "red" }} />
              <b>Client risqué</b>
            </Grid>
            <Grid justifyContent="flex-start" alignItems="flex-start">
              <CircleRoundedIcon style={{ color: "orange" }} />
              <b>Client moyennement risqué</b>
            </Grid>
            <Grid justifyContent="flex-start" alignItems="flex-start">
              <CircleRoundedIcon style={{ color: "green" }} />
              <b>Client peu risqué</b>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    </>
  );
};

export default Risque;








Risque.js:24 
 Warning: N° client SGCI is a string based column selector which has been deprecated as of v7 and will be removed in v8. Instead, use a selector function e.g. row => row[field]...
setTimeout (async)		
$ReactRefreshModuleRuntime$	@	Risque.js:24
./src/pages/Risque.js	@	Risque.js:24
options.factory	@	react refresh:6
__webpack_require__	@	bootstrap:22
_requireSelf	@	hot module replacement:101
apply	@	jsonp chunk loading:444
(anonymous)	@	hot module replacement:342
internalApply	@	hot module replacement:340
(anonymous)	@	hot module replacement:277
waitForBlockingPromises	@	hot module replacement:232
(anonymous)	@	hot module replacement:275
Promise.then (async)		
(anonymous)	@	hot module replacement:274
Promise.then (async)		
(anonymous)	@	hot module replacement:255
Promise.then (async)		
hotCheck	@	hot module replacement:246
Show 26 more frames

data
: 
A
: 
{name: "Chiffres d'affaires", value: Array(196)}
B
: 
{name: 'N° client SGCI', value: Array(196)}
C
: 
{name: 'Montant des engagements', value: Array(196)}
D
: 
{name: 'Cluster ID', value: Array(196)}


const getClient = async() => {
    await axios.get('http://localhost:3000/get')
    .then((response) => {
      console.log("reponse of clients: ", response);
      
      if (response.status === 200) {
        const data = response.data;
        setClient(data);
      
           } 

      })
      .catch((error) => {
        console.log('Error lors du traitement:', error);
        setError('Oups !!!! erreur liée au serveur');
        console.log(error.response?.data || "Oups!!!! une erreur s'est produite");
      });
  }

  
  const navigate = useNavigate();
  const columns = [
    
    {
      name: 'Action',
      button: true,
      cell: row => (
        <Button   style={{ color: 'black'}}  onClick={() =>  navigate(`/dashboard/chaine-de-valeur`, { replace: true })}>
        <VisibilityIcon style={{ color: '#495F52',  fontSize: 30 }}/>
        </Button>
      ),
    },
  ];

const data = [
   
   
   
    
  ];


 <DataTable
        
            columns={columns}
            data={filteredItems}
            pagination
            paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1
            subHeader
            subHeaderComponent={subHeaderComponentMemo}
            persistTableHead
          />
