----risque---
import React, { useState, useEffect } from "react";
import DataTable from "react-data-table-component";
import { useNavigate } from "react-router-dom";
import axios from "axios";

import {
  Card,
  Stack,
  Grid,
  Box,
  Container,
  Button,
  Typography,
} from "@mui/material";
import VisibilityIcon from "@mui/icons-material/Visibility";
import CircleRoundedIcon from "@mui/icons-material/CircleRounded";
import Tooltip from "@mui/material/Tooltip";

import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
// import { useNavigate } from 'react-router-dom';
import Scrollbar from "../components/scrollbar";
import FilterComponent from "../utils/filter";

export default function Risque() {
  // Utilisez le hook useNavigate pour la navigation
  // const navigate = useNavigate();
  const [error, setError] = useState("");
  const [client, setClient] = useState([]);

  const getClient = async () => {
    await axios
      .get("http://localhost:8000/get_clients")
      .then((response) => {
        console.log("reponse of clients: ", response);

        if (response.status === 200) {
          const data = response.data;
         // setClient(data);
          const column = data.map((i) => {
            return {
              "N° client SGCI": i.CLI_S_SGCI.value,
              "Cluster Id": i.FINAL_CLUSTERS.value,
              "Raison social": i.NOMREST_S.value,
              "Chiffre d'affaires": i.CA_XOF.value,
              "Montant des engagements": i.Engagement_XOF.value,
              "Niveau de risque": i.Provi_Stage_Code.value,
              "Priorité": i.Priority.value,
              "Notation NOVA": i.NOVA.value,
            };
          },
          setClient(column)
          );
        }
      })
      .catch((error) => {
        console.log("Error lors du traitement:", error);
        setError("Oups !!!! erreur liée au serveur");
        console.log(
          error.response?.data || "Oups!!!! une erreur s'est produite"
        );
      });
  };

  const navigate = useNavigate();
  const columns = [
    {
      name: "N° client SGCI",
      selector: 'N° client SGCI',
      sortable: true
    },
    {
      name: "Cluster Id",
      selector: "Cluster Id",
    //  Cell: (props) => <span className="number">{props.value}</span>, 
      sortable: true
      // Custom cell components!
    },
    {
      name: "Raison social",
      selector: 'Raison social',
      sortable: true
    },
    {
      name: "Chiffre d’affaires", // Custom header components!
      selector: 'Chiffre d’affaires',
      sortable: true
    },
    {
      name: "Montant des engagements", //  Custom header components!
      selector: 'Montant des engagements',
      sortable: true
    },
    {
      name: "Niveau de risque",
      selector: 'Niveau de risque',
      sortable: true
    },
    {
      name: "Priorité",
      selector: 'Priorité',
      sortable: true
    },
    {
      name: "Notation NOVA",
      selector: 'Notation NOVA',
      sortable: true
    },
    // {
    //   name: 'Niveau de risque',
    //   selector:  row => row.nr,
    // },
    {
      name: "Action",
      button: true,
      cell: (row) => (
        <Button
          style={{ color: "black" }}
          onClick={() =>
            navigate(`/dashboard/chaine-de-valeur`, { replace: true })
          }
        >
          <VisibilityIcon style={{ color: "#495F52", fontSize: 30 }} />
        </Button>
      ),
    },
  ];

  const data = [
    {
      Nc: "500144273",
      entr: "Orange",
      mont: "4500000",
      Ca: "28008967.252",
      np: <CircleRoundedIcon style={{ color: "red" }} />,
      nv: "-6",
      // nr: 'Risque Moyen faible'
    },
    {
      Nc: "700581368",
      entr: "ANADER",
      mont: "650000",
      Ca: "3698782459.00",
      np: <CircleRoundedIcon style={{ color: "green" }} />,
      nv: "-4",
      // nr:'Risque moyen élevé'
    },

    {
      Nc: "475813681",
      entr: "ACENA",
      mont: "890000",
      Ca: "853782459.00",
      np: <CircleRoundedIcon style={{ color: "orange" }} />,
      nv: "-7",
      // nr:'Risque faible'
    },
  ];
  // data = [..."_".repeat(400000)].map((_, i)=> data[i%data.length]);
  // console.log("data legth", data.length);
  const [filterText, setFilterText] = React.useState("");
  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(
    false
  );
  const filteredItems = data.filter(
    (item) =>
      item.Nc && item.Nc.toLowerCase().includes(filterText.toLowerCase())
  );
  const subHeaderComponentMemo = React.useMemo(() => {
    const handleClear = () => {
      if (filterText) {
        setResetPaginationToggle(!resetPaginationToggle);
        setFilterText("");
      }
    };
    return (
      <FilterComponent
        onFilter={(e) => setFilterText(e.target.value)}
        onClear={handleClear}
        filterText={filterText}
      />
    );
  }, [filterText, resetPaginationToggle]);
  return (
    <>
      <Stack
        direction="row"
        alignItems="center"
        justifyContent="space-between"
        mb={5}
      >
        {/* <Typography variant="h4" gutterBottom>
          Clients
        </Typography> */}
        {/* <Button
          variant="contained"
          onClick={() => navigate('/create-product')}
          startIcon={<Iconify icon="eva:plus-fill" />}
        >
          New Product
        </Button> */}
      </Stack>
      <Card>
        <Scrollbar>
          <DataTable
            columns={columns}
            data={client}
            pagination
            paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1
            subHeader
            subHeaderComponent={subHeaderComponentMemo}
            persistTableHead
          />
        </Scrollbar>
      </Card>
      <Button size="large" variant="contained" onClick={getClient}>
        get
      </Button>
      <Box
        sx={{
          mt: 8,
          bgcolor: "background.paper",
          boxShadow: 7,
          borderRadius: 1,
          border: 1,
          borderColor: "#e7e0e0",
        }}
      >
        {" "}
        <center>
          <b>
            <i>Légende</i>
          </b>
        </center>
        <Grid container sx={{ mt: 4 }}>
          <Grid
            container
            sx={{ mb: 2 }}
            direction="row"
            justifyContent="space-around"
            alignItems="flex-start"
          >
            <Grid justifyContent="flex-start" alignItems="flex-start">
              {/* <Tooltip
                    title="Client SGCI, plus le rond devient rouge, plus le montant
                                    d'engagement est important"
                  >
                    
                  </Tooltip> */}
              <CircleRoundedIcon style={{ color: "red" }} />
              <b>Client risqué</b>
            </Grid>

            <Grid justifyContent="flex-start" alignItems="flex-start">
              <CircleRoundedIcon style={{ color: "orange" }} />
              <b>client moyennement risqué</b>
              {/* <Tooltip
                    title="Client SGCI, plus le rond devient rouge, plus le montant
                                    d'engagement est important"
                  >
                    <CircleRoundedIcon style={{ color: "blue" }} />
                  </Tooltip> */}
            </Grid>

            <Grid justifyContent="flex-start" alignItems="flex-start">
              <CircleRoundedIcon style={{ color: "green" }} />
              <b>client peu risqué</b>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    </>
  );
}







Risque.js:24 
 Warning: N° client SGCI is a string based column selector which has been deprecated as of v7 and will be removed in v8. Instead, use a selector function e.g. row => row[field]...
setTimeout (async)		
$ReactRefreshModuleRuntime$	@	Risque.js:24
./src/pages/Risque.js	@	Risque.js:24
options.factory	@	react refresh:6
__webpack_require__	@	bootstrap:22
_requireSelf	@	hot module replacement:101
apply	@	jsonp chunk loading:444
(anonymous)	@	hot module replacement:342
internalApply	@	hot module replacement:340
(anonymous)	@	hot module replacement:277
waitForBlockingPromises	@	hot module replacement:232
(anonymous)	@	hot module replacement:275
Promise.then (async)		
(anonymous)	@	hot module replacement:274
Promise.then (async)		
(anonymous)	@	hot module replacement:255
Promise.then (async)		
hotCheck	@	hot module replacement:246
Show 26 more frames

data
: 
A
: 
{name: "Chiffres d'affaires", value: Array(196)}
B
: 
{name: 'N° client SGCI', value: Array(196)}
C
: 
{name: 'Montant des engagements', value: Array(196)}
D
: 
{name: 'Cluster ID', value: Array(196)}


const getClient = async() => {
    await axios.get('http://localhost:3000/get')
    .then((response) => {
      console.log("reponse of clients: ", response);
      
      if (response.status === 200) {
        const data = response.data;
        setClient(data);
      
           } 

      })
      .catch((error) => {
        console.log('Error lors du traitement:', error);
        setError('Oups !!!! erreur liée au serveur');
        console.log(error.response?.data || "Oups!!!! une erreur s'est produite");
      });
  }

  
  const navigate = useNavigate();
  const columns = [
    
    {
      name: 'Action',
      button: true,
      cell: row => (
        <Button   style={{ color: 'black'}}  onClick={() =>  navigate(`/dashboard/chaine-de-valeur`, { replace: true })}>
        <VisibilityIcon style={{ color: '#495F52',  fontSize: 30 }}/>
        </Button>
      ),
    },
  ];

const data = [
   
   
   
    
  ];


 <DataTable
        
            columns={columns}
            data={filteredItems}
            pagination
            paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1
            subHeader
            subHeaderComponent={subHeaderComponentMemo}
            persistTableHead
          />
