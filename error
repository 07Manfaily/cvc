import React, { useState } from 'react';
import Grid from '@mui/material/Grid';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import Chip from '@mui/material/Chip';
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import Modal from '@mui/material/Modal';
import Button from '@mui/material/Button';
import Paper from '@mui/material/Paper';
import List from '@mui/material/List';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import Checkbox from '@mui/material/Checkbox';
import Typography from '@mui/material/Typography';

function not(a, b) {
    return a.filter((value) => b.indexOf(value) === -1);
}

function intersection(a, b) {
    return a.filter((value) => b.indexOf(value) !== -1);
}

function TransferList({ leftItems, rightItems, onAdd }) {
    const [checked, setChecked] = useState([]);
    const [left, setLeft] = useState(leftItems);
    const [right, setRight] = useState(rightItems);

    const leftChecked = intersection(checked, left);
    const rightChecked = intersection(checked, right);

    const handleToggle = (value) => () => {
        const currentIndex = checked.indexOf(value);
        const newChecked = [...checked];

        if (currentIndex === -1) {
            newChecked.push(value);
        } else {
            newChecked.splice(currentIndex, 1);
        }

        setChecked(newChecked);
    };

    const handleAllRight = () => {
        setRight(right.concat(left));
        setLeft([]);
    };

    const handleCheckedRight = () => {
        setRight(right.concat(leftChecked));
        setLeft(not(left, leftChecked));
        setChecked(not(checked, leftChecked));
    };

    const handleCheckedLeft = () => {
        setLeft(left.concat(rightChecked));
        setRight(not(right, rightChecked));
        setChecked(not(checked, rightChecked));
    };

    const handleAllLeft = () => {
        setLeft(left.concat(right));
        setRight([]);
    };

    const customList = (items) => (
        <Paper sx={{ width: 200, height: 230, overflow: 'auto' }}>
            <List dense component="div" role="list">
                {items.map((value) => {
                    const labelId = `transfer-list-item-${value}-label`;

                    return (
                        <ListItemButton
                            key={value}
                            role="listitem"
                            onClick={handleToggle(value)}
                        >
                            <ListItemIcon>
                                <Checkbox
                                    checked={checked.indexOf(value) !== -1}
                                    tabIndex={-1}
                                    disableRipple
                                    inputProps={{
                                        'aria-labelledby': labelId,
                                    }}
                                />
                            </ListItemIcon>
                            <ListItemText id={labelId} primary={value} />
                        </ListItemButton>
                    );
                })}
            </List>
        </Paper>
    );

    return (
        <Grid
            container
            spacing={2}
            sx={{ justifyContent: 'center', alignItems: 'center' }}
        >
            <Grid item>{customList(left)}</Grid>
            <Grid item>
                <Grid container direction="column" sx={{ alignItems: 'center' }}>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleAllRight}
                        disabled={left.length === 0}
                        aria-label="move all right"
                    >
                        ≫
                    </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleCheckedRight}
                        disabled={leftChecked.length === 0}
                        aria-label="move selected right"
                    >
                        &gt;
                    </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleCheckedLeft}
                        disabled={rightChecked.length === 0}
                        aria-label="move selected left"
                    >
                        &lt;
                    </Button>
                    <Button
                        sx={{ my: 0.5 }}
                        variant="outlined"
                        size="small"
                        onClick={handleAllLeft}
                        disabled={right.length === 0}
                        aria-label="move all left"
                    >
                        ≪
                    </Button>
                </Grid>
            </Grid>
            <Grid item>{customList(right)}</Grid>
            <Button onClick={() => onAdd(right)}>Valider</Button>
        </Grid>
    );
}

export default function CheckPointConfiguration() {
    const [selectedCard, setSelectedCard] = useState(null);
    const [open, setOpen] = useState(false);
    const [cardData, setCardData] = useState({
        Trimestriel: ['Element 1', 'Element 2', 'Element 3', 'Element 4', 'Element 5'],
        Semestriel: ['certificat de nationnalité', 'Element 7', 'Element 8', 'Element 9', 'Element 10'],
        Mensuelle: ['Element 11', 'casier judiciaire', 'Element 13', 'Element 14', 'Element 15'],
    });
    const [modalData, setModalData] = useState([]);

    const handleCardClick = (title) => {
        setSelectedCard(title);
        setModalData(['Element 16', 'Element 17', 'Element 18', 'Element 19', 'Element 20']); // Example data for modal
        setOpen(true);
    };

    const handleDelete = (cardTitle, item) => {
        setCardData((prevData) => ({
            ...prevData,
            [cardTitle]: prevData[cardTitle].filter((element) => element !== item),
        }));
    };

    const handleModalClose = () => {
        setOpen(false);
    };

    const handleModalAdd = (selectedItems) => {
        setCardData((prevData) => ({
            ...prevData,
            [selectedCard]: [...prevData[selectedCard], ...selectedItems],
        }));
        handleModalClose();
    };

    const getCardStyle = (title) => {
        let baseStyle = {
            margin: '16px',
            padding: '16px',
            borderRadius: '15px',
            boxShadow: '0 3px 5px 2px rgba(0, 0, 0, .3)',
            transition: 'transform 0.3s',
            cursor: 'pointer',
            border: selectedCard === title ? '5px solid #FFD700' : 'none',
        };

        switch (title) {
            case 'Trimestriel':
                return { ...baseStyle, background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)', color: 'white' };
            case 'Semestriel':
                return { ...baseStyle, background: 'linear-gradient(45deg, #66BB6A 30%, #43A047 90%)', color: 'white' };
            case 'Mensuelle':
                return { ...baseStyle, background: 'linear-gradient(45deg, #FF8E53 30%, #FF6B6B 90%)', color: 'white' };
            default:
                return baseStyle;
        }
    };

    const getChipStyle = (item) => {
        // Random color generation for the chips
        const colors = ['#FFC107', '#8E44AD', '#E67E22', '#3498DB', '#2ECC71'];
        const color = colors[Math.floor(Math.random() * colors.length)];
        return { backgroundColor: color, color: 'white', margin: '4px' };
    };

    return (
        <>
            <Grid container direction="column">
                {/* Header */}
                <Grid container direction="row">
                    <Grid item xs={12}>
                        <nav style={{ width: "100%", padding: '16px', backgroundColor: '#333', color: '#fff' }}>
                            <Typography variant="h6">Configuration de contrôle</Typography>
                        </nav>
                    </Grid>

                    <Grid item xs={12}>
                        {/* Main Content */}
                        <Grid container spacing={3} style={{ padding: '36px' }}>
                            {['Trimestriel', 'Semestriel', 'Mensuelle'].map((title) => (
                                <Grid item xs={12} sm={6} md={4} key={title}>
                                    <Card
                                        style={getCardStyle(title)}
                                        onClick={() => handleCardClick(title)}
                                    >
                                        <CardContent>
                                            <Typography variant="h5">{title}</Typography>
                                        </CardContent>
                                    </Card>

                                    {/* Sub Card with List of Chips */}
                                    <Card style={{ marginTop: '16px', padding: '16px', borderRadius: '10px', boxShadow: '0 3px 5px 2px rgba(0, 0, 0, .2)' }}>
                                        <CardContent>
                                            <Typography variant="h6">{`Éléments de ${title}`}</Typography>
                                            {cardData[title].map((item) => (
                                                <Chip
                                                    key={item}
                                                    label={item}
                                                    onDelete={() => handleDelete(title, item)}
                                                    deleteIcon={
                                                        <IconButton size="small">
                                                            <CloseIcon style={{ color: 'red' }} />
                                                        </IconButton>
                                                    }
                                                    style={getChipStyle(item)}
                                                />
                                            ))}
                                        </CardContent>
                                    </Card>
                                </Grid>
                            ))}
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>

            {/* Modal for Transfer List */}
            <Modal open={open} onClose={handleModalClose}>
                <div style={{ width: '80%', margin: 'auto', marginTop: '5%', padding: '20px', backgroundColor: 'white' }}>
                    <Typography variant="h6" gutterBottom>
                        Ajouter des éléments à {selectedCard}
                    </Typography>
                    <TransferList
                        leftItems={modalData}
                        rightItems={cardData[selectedCard] || []}
                        onAdd={handleModalAdd}
                    />
                </div>
            </Modal>
        </>
    );
}
