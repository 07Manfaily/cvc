const columns = client ? [
  ...Object.keys(client[0]).map(col => ({
    name: col,
    selector: col,
    maxWidth: "140px",
  })),
  {
    name: 'Actions',
    cell: (row) => (
      <Button
        style={{ color: "black" }}
        onClick={() => handleActionClick(row.FINAL_CLUSTERS, 2)}
      >
        <VisibilityIcon style={{ color: "#495F52", fontSize: 20 }} />
      </Button>
    ),
    ignoreRowClick: true,
    allowOverflow: true,
    button: true,
    width: "70px"
  }
] : [];



const [client, setClient] = useState();

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true)

        const response = await axios.get("/api/factoring/get-client");
        console.log("Réponse des clients affacturage:", response.data.data);

        if (response.status === 200) {
          setLoading(false)
          const data = response.data.data;
          const table = response.data.data.map((e) => {
            let newData = {}
            Object.keys(e).forEach(key => {
              newData[key] = e[key]
            });
            return newData;
          })
          setClient(table)

        }

        console.log("tableau:", client);

      } catch (error) {
        console.log("Erreur lors du traitement:", error);
        setError("Oups !!!! erreur liée au serveur");
        console.log(
          error.response?.data || "Oups!!!! une erreur s'est produite"
        );
      }
    };

    fetchData();
  }, []);

  const handleActionClick = (nc, level) => {
    navigate(`/dashboard/chaine-de-valeur/${nc}/${level}`, { replace: true });
  };


  const columns = Object.client(client[0]).map(col => ({

    name: col,
    selector: (row) => row[col],
    maxWidth: "140px",
    button: true,
    cell: (row) => (
      <Button
        style={{ color: "black" }}
        onClick={() => handleActionClick(row.FINAL_CLUSTERS, 2)}
      >
        <VisibilityIcon style={{ color: "#495F52", fontSize: 30 }} />
      </Button>
    ),



  }));





