const edges = graphe.map((i) => {
    return {
        from: i.emitter_code_id,
        to: i.receiver_code_id,
        color: {
            inherit: 'from',
        },
        smooth: {
            enabled: true,
            type: "continuous",
            roundness: 0.5
        },
    };
}).concat(
    Object.values(node).filter(n => n.number_deposit > 0).map((n) => {
        return {
            "from": n.code_id,
            "to": n.code_id,
            "label": n.cash_deposit,
            width: 2,
            color: "red",
            dashes: true,
            arrows: {
                to: {
                    enabled: true,
                    scaleFactor: 0.5,
                }
            }
        };
    }),
    Object.values(node).filter(n => n.number_withdrawal > 0).map((n) => {
        return {
            "from": n.code_id,
            "to": n.code_id,
            "label": n.cash_withdrawal,
            width: 2,
            color: "blue",
            dashes: true,
            arrows: {
                to: {
                    enabled: true,
                    scaleFactor: 0.5,
                }
            },
            // Pour faire une légère rotation
            font: {
                strokeWidth: 0,
                strokeColor: "#ffffff",
                align: "horizontal",
                color: "#ffffff",
            },
        };
    })
);

<Graph
    graph={{ nodes: nodes, edges: edges }}
    options={options}
/>


const downloadFile = async () => {
        try {
            await fetch(
                "/api/graph/download",
                {
                    method: "POST",
                    mode: "cors",

                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    },
                    body: JSON.stringify({
                        "emitter": emetteur,
                        "receiver": receveur
                    })
                },

            ).then((response) => {
                console.log("response", response)
                return response.blob()
            }).then((data) => {
                console.log("data de boris et sadia", data)
                var file = window.URL.createObjectURL(data);
                window.location.assign(file);
            }).catch()





        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }

    const downloadFile = async () => {
        try {
            const response = await axios.post(
                "/api/graph/download",
                {
                    "emitter": emetteur,
                    "receiver": receveur
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    }
                }
            );


       
                return response.blob()
                var file = window.URL.createObjectURL(response.data);
                console.log("data de boris et sadia", response.data)
                var file = window.URL.createObjectURL(response.data);
                window.location.assign(file);
            

        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }
