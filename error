 const columns = column.map((col) => {
        return {
            name: col.to_display,
            selector: (row) => row[col["key"]]
        }
    }
    
    )
    const filteredColumns = columns.filter(col => !checkedItems[col.key]);
    const subHeaderComponentMemo = (
        <FilterComponent
            onFilter={(e) => setFilterText(e.target.value)}
            onClear={() => setFilterText("")}
            filterText={filterText}
        />
    );

    const filteredItems = transaction ? transaction.filter((item) =>
        Object.values(item).some(
            (value) =>
                typeof value === "string" &&
                value.toLowerCase().includes(filterText.toLowerCase())
        )
    ) : [];

    return (
        <>
            {/* Modal for transaction */}
            <Modal
                open={ope}
                onClose={handleClos}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={style}>

                    <Accordion>
                        <AccordionSummary

                            aria-controls="panel3-content"
                            id="panel3-header"
                        >
                            <FilterListIcon />
                        </AccordionSummary>
                        <AccordionDetails>
                            <FixedSizeList
                                height={200}
                                width={300}
                                itemSize={46}
                                itemCount={1}
                                overscanCount={5}
                            >
                                {returnColumn}
                            </FixedSizeList>
                        </AccordionDetails>

                    </Accordion>


                    <Grid
                        sx={{ mt: 7 }}
                        container
                        direction="column"
                        justifyContent="space-between"
                        alignItems="flex-start"
                    >
                        <DataTable
                            title="DÃ©tails des transactions"
                            columns={columns}
                            data={filteredItems}
                            pagination

                            progressPending={loadtable}
                            progressComponent={<FidgetSpinner
                                backgroundColor="black"
                                ballColors={["#EB2400", "red", "red"]}
                                visible={loadtable}
                                height="70"
                                width="70"
                                ariaLabel="fidget-spinner-loading"
                                wrapperStyle={{}}
                                wrapperClass="fidget-spinner-wrapper"

                            />}
                            paginationResetDefaultPage={resetPaginationToggle}
                            subHeader
                            fixedHeader
                            fixedHeaderScrollHeight="500px"
                            subHeaderComponent={subHeaderComponentMemo}

                        />
                    </Grid>

                </Box>
            </Modal>
