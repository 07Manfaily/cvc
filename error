import React, { useState, useEffect } from "react";
import DataTable from "react-data-table-component";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { Card, Stack, Grid, Box, Button } from "@mui/material";
import VisibilityIcon from "@mui/icons-material/Visibility";
import CircleRoundedIcon from "@mui/icons-material/CircleRounded";
import FilterComponent from "../utils/filter";
import { fNumber } from "../utils/formatNumber";
import { Puff} from 'react-loader-spinner';



const Risque = () => {
  const navigate = useNavigate();
  const [client, setClient] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await axios.get("/api/risk/get-clients");
        if (response.status === 200) {
          setLoading(false);
          const data = response.data.data;
          const dataset = data[Object.keys(data)[0]].value.map((_, line) => {
            const row = {};
            Object.keys(data).forEach((col) => {
              row[col] = data[col].value[line];
            });
            return row;
          });
          setClient(dataset);
        }
      } catch (error) {
        setLoading(false);
        console.log("Erreur lors du traitement:", error);
      }
    };
    fetchData();
  }, []);

  // Définir les colonnes dynamiquement
  const columns = client.length > 0 ? Object.keys(client[0]).map(col => ({
    name: col,
    selector: row => row[col],
    // Définir maxWidth ou autres propriétés selon vos besoins
  })) : [];

  const handleActionClick = (row) => {
    navigate(`/dashboard/chaine-de-valeur/${row.FINAL_CLUSTERS}/2`, { replace: true });
  };

  return (
    <>
      <Card>
        {loading ? (
          <Puff visible={true} height="80" width="80" color="red" ariaLabel="puff-loading" wrapperStyle={{}} wrapperClass="" />
        ) : (
          <DataTable
            title="Liste des clients en dégradation"
            columns={columns.concat({
              name: "Action",
              button: true,
              cell: (row) => (
                <Button
                  style={{ color: "black" }}
                  onClick={() => handleActionClick(row)}
                >
                  <VisibilityIcon style={{ color: "#495F52", fontSize: 30 }} />
                </Button>
              ),
            })}
            data={client}
            pagination
            subHeader
            fixedHeader
            fixedHeaderScrollHeight="500px"
          />
        )}
      </Card>
    </>
  );
};

export default Risque;
