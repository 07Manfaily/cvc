const handleEdgeClick = (event) => {
    const edge = event.edges;
    if (edge.length > 0) {
        setOpe(true)
        const clickedEdge = edges.find((_edge) => _edge.id === edge[0]);
        if (clickedEdge.color === "orange") {
            // Arête de dépôt
            getTransaction(clickedEdge.from, clickedEdge.to, 1);
        } else if (clickedEdge.color === "blue") {
            // Arête de retrait
            getTransaction(clickedEdge.from, clickedEdge.to, -1);
        } else {
            // Arête normale
            getTransaction(clickedEdge.from, clickedEdge.to, 0);
        }
        setEmetteur(clickedEdge.from);
        setReceveur(clickedEdge.to);
    }
};    const handleEdgeClick = (event) => {
        const edge = event.edges;
        if (edge.length > 0) {
            setOpe(true)
            const emet = edges.filter((_edge) => _edge.id === edge[0])[0].from
            const receiv = edges.filter((_edge) => _edge.id === edge[0])[0].to
            getTransaction(emet, receiv)
            setEmetteur(emet)
            setReceveur(receiv)
            console.log("valeur:", emet)

        }
    };

    const events = {
        selectEdge: handleEdgeClick,
    };





   const edges = graphe.map((i) => {
        return {
            from: i.emitter_code_id,
            to: i.receiver_code_id,
            color: {
                inherit: 'from',
            },
            smooth: {
                enabled: true,
                type: "continuous",
                roundness: 0.5
            },
            x:42
        }
    }).concat(Object.values(node).filter(n => n.number_deposit>0).map((n)=>{
        return{
            "from": n.code_id,
            "to": n.code_id,
            "label": n.cash_deposit,
            width: 2,
            arrows: {
                to: {
                    enabled: true,
                    scaleFactor: 1,
                }
            },
         arrowScaleFactor:0.5 ,
         lineWidth:12,
        color:"orange",

        }
    })).concat( Object.values(node).filter(n => n.number_withdrawal>0).map((n)=>{
        return{
            "from": n.code_id,
            "to": n.code_id,
            "label": n.cash_withdrawal,
            width: 2,
            color:"blue",
        }
    }))

  const getTransaction = async (emitter, receiver) => {

        try {
            setLoadTable(true)
            const response = await axios.post(
                "/api/transaction",
                {
                    "emitter": emitter,
                    "receiver": receiver
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    }
                }
            );

            if (response.status === 200) {
                setLoadTable(false)
            }
            const column = response.data.columns;
            const transaction = response.data.transactions;
            setColumn(column)
            setTransaction(transaction)

            console.log("column:", column);


        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }


