 const downloadFile = async () => {
        try {
            setLoadDownload(true)
            const response = await axios.post(
                "/api/graph/download",
                {
                    "emitter": emetteur,
                    "receiver": receveur,
                    "cash_transaction": tag === "deposit" ? 1 : tag === "withdrawal" ? -1 : 0
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    },
                    responseType: 'blob'
                }
            );

            console.log("tag download", tag)
            if (response.status === 200) {
                setLoadDownload(false)
                var file = window.URL.createObjectURL(response.data);

                window.location.assign(file);
            }



        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }  const edges = graphe.map((i) => {
 
    return {
        from: i.emitter_code_id,
        to: i.receiver_code_id,
        width:2,
        color: {
            inherit: 'from',
        },
        smooth: {
            enabled: true,
            type: "continuous",
            roundness: 0.5
        },
      
        tag:  "normal"
    };
}).concat(Object.values(node).map((n) => {
    if (nodeWithBoth[n.code_id] === 'deposit') {
        return {
            from: n.code_id,
            to: n.code_id,
            label: n.cash_deposit,
            tag: "deposit",
            width: 2,
            hoverWidth: 4,
            color: "orange",
        };
    } else if (nodeWithBoth[n.code_id] === 'withdrawal') {
        return {
            from: n.code_id,
            to: n.code_id,
            label: n.cash_withdrawal,
            tag: "withdrawal",
            width: 2,
            hoverWidth: 4,
            color: "blue",
        };
    } else if (nodeWithBoth[n.code_id] === 'both') {
        return {
            from: n.code_id,
            to: n.code_id,
            title: `Crédit ${n.cash_deposit} / Débit ${n.cash_withdrawal}`,
            tag: "double",
            width: 2,
            hoverWidth: 4,
            color: "black",
            arrows: "to, from"
        };
    } else {
        return null;
    }
}).filter(edge => edge !== null));
   const handleEdgeClick = (event) => {
        const edge = event.edges;
        if (edge.length > 0) {
            setOpe(true)
            const clickedEdge = edges.find((_edge) => _edge.id === edge[0]);
            if (clickedEdge.tag === "deposit") {
                // Arête de dépôt
                getTransaction(clickedEdge.from, clickedEdge.to, 1);
            } else if (clickedEdge.tag === "withdrawal") {
                // Arête de retrait
                getTransaction(clickedEdge.from, clickedEdge.to, -1);
            } else {
                // Arête normale
                getTransaction(clickedEdge.from, clickedEdge.to, 0);
            }
            setEmetteur(clickedEdge.from);
            setReceveur(clickedEdge.to);
            setTag(clickedEdge.tag)
            console.log("valeur from", clickedEdge.from);
            console.log(" tag", clickedEdge.tag);

        }
    };
    const events = {
        selectEdge: handleEdgeClick,
    };
