{
  "name": "credapp",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@fontsource/roboto": "^5.0.13",
    "@mui/icons-material": "^5.15.20",
    "@mui/lab": "^5.0.0-alpha.170",
    "@mui/material": "^5.15.20",
    "@mui/styled-engine-sc": "^6.0.0-alpha.18",
    "@mui/styles": "^5.15.21",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^12.1.2",
    "animate.css": "^4.1.1",
    "axios": "^1.7.2",
    "date-fns": "^3.6.0",
    "http-proxy-middleware": "^3.0.0",
    "numeral": "^2.0.6",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-loader-spinner": "^6.1.6",
    "react-router": "^6.23.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "5.0.1",
    "react-toastify": "^8.1.0",
    "styled-components": "^5.3.3",
    "typescript": "^4.5.2",
    "web-vitals": "^2.1.4"
  },
  "cache": false,
  "proxy": "http://localhost:7777",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}




import React, { useState, useEffect } from 'react';
import 'animate.css';

const Questionnaire = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState(Array(10).fill({ radio: '', comment: '' }));
  const [animationClass, setAnimationClass] = useState('');

  useEffect(() => {
    setAnimationClass('animate__animated animate__backInUp');
    const timer = setTimeout(() => {
      setAnimationClass('');
    }, 1000); // La durée de l'animation doit correspondre à celle définie dans animate.css (par défaut 1s)

    return () => clearTimeout(timer);
  }, [currentQuestion]);

  const handleNext = () => {
    setCurrentQuestion((prev) => Math.min(prev + 1, 9));
  };

  const handleBack = () => {
    setCurrentQuestion((prev) => Math.max(prev - 1, 0));
  };

  const handleAnswerChange = (index, field, value) => {
    const newAnswers = [...answers];
    newAnswers[index] = { ...newAnswers[index], [field]: value };
    setAnswers(newAnswers);
  };

  const handleQuestionClick = (index) => {
    if (answers[index].radio && answers[index].comment) {
      setCurrentQuestion(index);
    }
  };

  const isQuestionValid = (index) => {
    return answers[index].radio && answers[index].comment;
  };

  return (
    <div>
      {answers.map((answer, index) => (
        <div
          key={index}
          className={`question ${index === currentQuestion ? animationClass : ''}`}
          style={{ display: index === currentQuestion ? 'block' : 'none' }}
        >
          <h2>Question {index + 1}</h2>
          <div>
            <label>
              <input
                type="radio"
                name={`question-${index}`}
                value="yes"
                checked={answer.radio === 'yes'}
                onChange={() => handleAnswerChange(index, 'radio', 'yes')}
              />
              Yes
            </label>
            <label>
              <input
                type="radio"
                name={`question-${index}`}
                value="no"
                checked={answer.radio === 'no'}
                onChange={() => handleAnswerChange(index, 'radio', 'no')}
              />
              No
            </label>
          </div>
          <textarea
            value={answer.comment}
            onChange={(e) => handleAnswerChange(index, 'comment', e.target.value)}
            placeholder="Add a comment"
          />
          <div>
            <button onClick={handleBack} disabled={index === 0}>
              Back
            </button>
            <button onClick={handleNext} disabled={index === 9}>
              Next
            </button>
          </div>
        </div>
      ))}
      <div className="question-navigation">
        {answers.map((_, index) => (
          <button
            key={index}
            onClick={() => handleQuestionClick(index)}
            disabled={!isQuestionValid(index)}
          >
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default Questionnaire;
