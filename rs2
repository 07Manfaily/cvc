Titre de la Présentation :
Le Métier de Développeur Frontend et Pourquoi Nous Avons Choisi React.js

Structure de la Présentation :
Introduction au Métier de Développeur Frontend (5 minutes)

Définition et Rôle :
Expliquez ce qu'est le développement frontend et comment il s'intègre dans le développement web.
Parlez des principales responsabilités d'un développeur frontend : conception et développement d'interfaces utilisateur, amélioration de l'expérience utilisateur (UX), optimisation des performances web, etc.
Compétences Clés :
Présentez les compétences nécessaires : HTML, CSS, JavaScript, compétences en design, compréhension des API, etc.
Mentionnez l'importance des outils et des frameworks modernes.
Pourquoi Nous Avons Choisi React.js (7 minutes)




Qu'est-ce que le Développement Frontend ?
Le développement frontend concerne tout ce qui est visible et interactif sur une application web. C’est l’aspect du développement web qui se concentre sur la création de l’interface utilisateur (UI) et l'expérience utilisateur (UX). Un développeur frontend traduit les maquettes et les conceptions graphiques en code fonctionnel que les utilisateurs peuvent voir et interagir avec directement via leur navigateur.

Comment s'intègre-t-il dans le Développement Web ?
Le développement web se divise en deux parties principales : le frontend et le backend.

Frontend : S’occupe de la partie visible de l’application. Utilise des technologies comme HTML, CSS et JavaScript pour construire des interfaces utilisateur interactives.
Backend : Concerne la gestion des bases de données, l’authentification, la logique métier et l’architecture serveur. Utilise des langages et des frameworks comme Node.js, Python, Ruby, Java, etc.
Le frontend communique avec le backend via des API (interfaces de programmation d'applications) pour échanger des données et rendre les applications web dynamiques et interactives.

Principales Responsabilités d'un Développeur Frontend
Conception et Développement d'Interfaces Utilisateur (UI) :

Traduction des Design en Code : Transformer les maquettes et les designs créés par les designers en pages web interactives. Utiliser des outils comme Figma, Sketch ou Adobe XD pour s’assurer que l’implémentation correspond au design.
Création de Composants Réutilisables : Développer des composants UI modulaires et réutilisables pour accélérer le développement et assurer la cohérence à travers l’application.
Amélioration de l'Expérience Utilisateur (UX) :

Interactivité et Navigation : Utiliser JavaScript et des frameworks comme React.js pour rendre les applications interactives et fluides. Assurer une navigation intuitive et réactive.
Accessibilité (a11y) : S’assurer que les applications sont accessibles à tous les utilisateurs, y compris ceux ayant des handicaps, en respectant les standards WAI-ARIA et en effectuant des tests d’accessibilité.
Optimisation des Performances Web :

Chargement Rapide des Pages : Optimiser les ressources comme les images, les scripts et les feuilles de style pour réduire les temps de chargement. Utiliser des techniques comme le lazy loading et le code splitting.
Réactivité et Adaptabilité : Assurer que les applications fonctionnent bien sur différents appareils et tailles d'écran (responsive design) en utilisant des media queries et des frameworks CSS comme Bootstrap ou Tailwind CSS.
Compétences Clés d'un Développeur Frontend
1. HTML (HyperText Markup Language)
Structure de Base : Créer la structure de la page web.
Sémantique : Utiliser des balises HTML sémantiques pour améliorer l’accessibilité et le SEO (Search Engine Optimization).
2. CSS (Cascading Style Sheets)
Stylisation : Appliquer des styles pour rendre les pages web attrayantes et conformes aux designs.
Layout et Design Responsive : Utiliser des techniques de mise en page comme Flexbox et Grid pour créer des designs adaptatifs.
3. JavaScript
Interactivité : Ajouter des fonctionnalités interactives comme des animations, des formulaires dynamiques, et des mises à jour en temps réel.
Manipulation du DOM : Utiliser JavaScript pour manipuler les éléments HTML et créer des interfaces utilisateur dynamiques.
4. Compétences en Design
Connaissance des Principes de Design : Comprendre la typographie, la théorie des couleurs, et la mise en page.
Outils de Design : Utiliser des outils comme Figma, Sketch, ou Adobe XD pour travailler efficacement avec les designers.
5. Compréhension des API
Consommation d’API : Utiliser des API RESTful ou GraphQL pour récupérer et envoyer des données entre le frontend et le backend.
Authentification et Autorisation : Gérer des mécanismes comme les tokens JWT pour sécuriser les échanges de données.
Importance des Outils et des Frameworks Modernes
Frameworks JavaScript : Utiliser des frameworks et bibliothèques comme React.js, Vue.js, ou Angular pour améliorer la productivité et créer des applications plus robustes et maintenables.
Gestion des États : Utiliser des bibliothèques comme Redux ou Context API pour gérer l'état de l'application de manière prévisible.
Outils de Build : Utiliser des outils comme Webpack, Babel, et npm pour gérer et optimiser les assets, et automatiser les tâches répétitives.
Versionnement : Utiliser Git et des plateformes comme GitHub ou GitLab pour le contrôle de version et la collaboration en équipe.
En développant ces points, tu offriras une vue d'ensemble complète du rôle crucial que jouent les développeurs frontend dans la création d'applications web modernes et de haute qualité.



Introduction à React.js :
Présentez brièvement React.js : qui l'a créé (Facebook), sa première apparition, et son évolution.
Expliquez les concepts fondamentaux de React comme les composants, les hooks, et le Virtual DOM.
Avantages de React.js :
Composants Réutilisables : Parlez de la modularité et de la réutilisabilité des composants, ce qui facilite la maintenance et le développement de nouvelles fonctionnalités.
Performance : Expliquez comment le Virtual DOM et la gestion efficace des mises à jour améliorent les performances.
Écosystème et Communauté : Soulignez la vaste communauté, les nombreuses bibliothèques et outils disponibles (comme Redux, React Router), et le support continu de Facebook.
Courbe d'Apprentissage : Discutez de la courbe d'apprentissage relativement douce pour les développeurs familiarisés avec JavaScript.
Flexibilité : Mentionnez la flexibilité de React pour s'intégrer avec d'autres frameworks et technologies.
Cas d'Utilisation Spécifiques :
Donnez des exemples concrets de projets au sein de votre entreprise où React a été particulièrement bénéfique.
Parlez des défis spécifiques que React a permis de surmonter.
Conclusion et Questions (3 minutes)

Résumé :
Récapitulez brièvement pourquoi le rôle de développeur frontend est crucial et pourquoi React.js a été choisi comme outil principal.
Ouverture aux Questions :
Encouragez les participants à poser des questions et à partager leurs propres expériences ou interrogations.
Conseils pour la Présentation :
Utilisez des Visuels : Incluez des diagrammes, des captures d'écran de projets, et des exemples de code pour illustrer vos points.
Interactivité : Posez des questions à l'audience pour rendre la présentation plus interactive et engageante.
Démonstrations : Si possible, faites une petite démonstration en direct de la création d'un composant React simple pour montrer la praticité de la technologie.





import React, { useState, useEffect } from "react";
import axios from "axios";
import { useParams } from "react-router-dom";
import { Grid, Box, Button, Drawer, Stack, Typography, Divider, IconButton } from "@mui/material";
import Graph from "react-graph-vis";
import DataTable from "react-data-table-component";
import Modal from "@mui/material/Modal";
import TextField from '@mui/material/TextField';
import Checkbox from '@mui/material/Checkbox';
import Slider from '@mui/material/Slider';
import MenuItem from '@mui/material/MenuItem';
import FilterComponent from "../utils/filter";
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import InputLabel from '@mui/material/InputLabel';
import SendIcon from '@mui/icons-material/Send';
import { getCookie } from '../utils/getCookies'
import { Vortex } from 'react-loader-spinner';
import { FidgetSpinner } from 'react-loader-spinner';
import FilterAltTwoToneIcon from '@mui/icons-material/FilterAltTwoTone';
import FilterAltOffTwoToneIcon from '@mui/icons-material/FilterAltOffTwoTone';
import CircleRoundedIcon from "@mui/icons-material/CircleRounded";
import StarOutlineIcon from '@mui/icons-material/StarOutline';
import Iconify from '../components/iconify';
import Scrollbar from '../components/scrollbar';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import FilterListIcon from '@mui/icons-material/FilterList';
import FileDownloadIcon from '@mui/icons-material/FileDownload';
import { FixedSizeList } from 'react-window';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ListItem from '@mui/material/ListItem';
import ListItemText from '@mui/material/ListItemText';
import LoadingButton from '@mui/lab/LoadingButton';
import { fNumber } from "src/utils/formatNumber";


export default function ValueChain() {
    const style = {
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        width: 1170,

        bgcolor: "background.paper",
        border: "2px solid #000",
        boxShadow: 24,
        p: 4,
    };

    const [open, setOpen] = React.useState(false);
    const [ope, setOpe] = React.useState(false);
    const [resetPaginationToggle, setResetPaginationToggle] = useState(false);
    const [filterText, setFilterText] = useState("");
    const handleOpen = () => setOpen(true);
    const handleClose = () => setOpen(false);
    const handleClos = () => setOpe(false);
    const [weight, setWeight] = React.useState(1)
    const [direction, setDirection] = React.useState(1);
    const [level, setLevel] = React.useState(2);
    const [riskCategory, setRiskCategory] = React.useState([]);
    const [slide, setSlide] = React.useState(1);
    const [graphe, setGraphe] = React.useState([])
    const [node, setNode] = React.useState({})
    const [loading, setLoading] = useState(false);
    const [loadtable, setLoadTable] = useState(true);
    const [alert, setAlert] = useState(false);
    const [selectedEdge, setSelectedEdge] = useState(null);
    const [transaction, setTransaction] = useState([]);
    const [column, setColumn] = useState([]);
    const [emetteur, setEmetteur] = useState();
    const [receveur, setReceveur] = useState();
    const [balance, setBalance] = useState();
    const [LoadDownload, setLoadDownload] = useState(false);
    const [LoadDownloadGraph, setLoadDownloadGraph] = useState(false);
    const [checkedItems, setCheckedItems] = useState({});
    const [tag, setTag] = useState("");
    const [message, setMessage] = useState("")
    const [bothFrom, setBothFrom] = useState()
    const [bothTo, setBothTo] = useState()
    const { Code } = useParams();
    const [clientCode, setClientCode] = React.useState(Code || "")

    // Fonction pour gérer le changement de l'état des cases à cocher
    const handleCheckboxChange = (key) => {
        setCheckedItems({ ...checkedItems, [key]: !checkedItems[key] });
    };

    const handleChangeCodeClient = (event) => {
        setClientCode(event.target.value);
    };

    
    const handleChangeDirection = (event) => {
        setDirection(event.target.value);
    };

    const handleChangeLevel = (event) => {
        setLevel(event.target.value);
    };

    const handleChangeWeight = (event) => {

        setWeight(event.target.value);

    };
    const handleChangeRiskCategory = (event) => {
        setRiskCategory([...riskCategory, event.target.value]);
    };
    const handleChangeSlide = (event) => {
        setSlide(event.target.value);
    };

    const fetchGraph = async () => {
        setLoading(true)
        handleClose()
        try {
            const response = await axios.post("/api/graph",
                {
                    "client_code_id": Code || clientCode,
                    "direction": direction,
                    "ftop_value": weight ? 0 : 1,
                    "ftransaction_weight": weight ? 1 : 0,
                    "fvalue": slide,
                    "level": level,
                    "risk_category": riskCategory
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    }
                },

            );

            if (response.status === 200) {
                setLoading(false)
                setGraphe(response.data.data)
                setClientCode("")
                setWeight(1)
                setDirection(1)
                setLevel(2)
                setRiskCategory([])
                setSlide(1)
                console.log("reponse", response)
            }
            if (response.status === 200 && response.data.data.length > 0 && response.data.balance != null) {
                setBalance(response.data.balance.mean)
            } else {
                setBalance(0)
            }

            if (response.status === 200 && response.data.data.length === 0) {
                setAlert(true)
                setMessage("Aucune transaction disponible pour ce client veuillez saisir un autre code client !")

            } else {
                setAlert(false)
                setMessage("")
            }
            const noeuds = new Set(response.data.data.map((rel) => {
                return [
                    rel.emitter_code_id,
                    rel.receiver_code_id
                ]
            }).reduce((a, b) => a.concat(b), []

            ))
            const nodeInfos = {}
            response.data.data.forEach((relation) => {
                ["receiver", "emitter"].forEach((_type) => {
                    let _id = _type + "_code_id";
                    _id = relation[_id]
                    let info = nodeInfos[_id];
                    if (!info) {
                        info = {};
                        Object.keys(relation).forEach(k => {
                            if (k.startsWith(_type)) {
                                let field = k.split(_type + "_").slice(1).join(_type);
                                info[field] = relation[k];
                            }
                        });
                        nodeInfos[_id] = info;
                    }
                })
            })
            setNode(nodeInfos)
            console.log("nodeInfos:", nodeInfos)
            // setNode(noeuds);
            console.log("les nodes du graphe", noeuds)
        }
        catch (error) {
            setLoading(false)
            setAlert(true)
            setMessage(error.message)
            console.log("Erreur lors du traitement:", error);
        }
    }

    const getTransaction = async (emitter, receiver, tag) => {

        try {
            setLoadTable(true)
            const response = await axios.post(
                "/api/transaction",
                {
                    "emitter": emitter,
                    "receiver": receiver,
                    "cash_transaction": tag
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    }
                }
            );

            if (response.status === 200) {
                setLoadTable(false)
            }
            const column = response.data.columns;
            const transaction = response.data.transactions;
            setColumn(column)
            setTransaction(transaction)

            console.log("column:", column);


        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }

    const downloadGrapheFile = async () => {
        try {
            setLoadDownloadGraph(true)
            const response = await axios.post(
                "/api/graph/download",
                {
                    "emitter": Code ? direction === 1 ? null : Code : direction === 1 ? null : clientCode,
                    "receiver": Code ? direction === -1 ? null : Code : direction === -1 ? null : clientCode
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    },
                    responseType: 'blob'
                }
            );

            if (response.status === 200) {
                setLoadDownloadGraph(false)
                var file = window.URL.createObjectURL(response.data);
                window.location.assign(file);
            }

        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }

    const downloadFile = async () => {
        try {
            setLoadDownload(true)
            const response = await axios.post(
                "/api/graph/download",
                {
                    "emitter": emetteur,
                    "receiver": receveur,
                    "cash_transaction": tag === "deposit" ? 1 : tag === "withdrawal" ? -1 : tag === "both" ? 2 : 0
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': getCookie("csrf_refresh_token")
                    },
                    responseType: 'blob'
                }
            );

            console.log("tag download", tag)
            if (response.status === 200) {
                setLoadDownload(false)
                var file = window.URL.createObjectURL(response.data);

                window.location.assign(file);
            }
        } catch (error) {
            console.log("Erreur lors du traitement:", error);
        }
    }
    function returnColumn() {

        return (

            column.map((col) => (
                <ListItem key={col.key} component="div" disablePadding>
                    <Checkbox
                        checked={checkedItems[col.key] || false}
                        onChange={() => handleCheckboxChange(col.key)}
                    />
                    <ListItemText primary={col.to_display} />
                </ListItem>
            )));
    }
    useEffect(() => {
        if(Code){
            setClientCode(Code)
        }
    }, [Code])
    useEffect(() => {
        fetchGraph()
    }, [Code])

    const nodes = Object.values(node).map((n) => {
        return {
            id: n.code_id,
            label: n.client_name,
            title: n.client_name,
            shape: n.code_id === parseInt(Code ? Code : clientCode, 10) ? "star" : "dot",
            color: {
                border: n.risk_category === 1 ? "#3D8E42" : n.risk_category === 2 ? "#A49F00" : n.risk_category === 3 ? "#FB0400" : n.risk_category === 4 ? "gray" : n.risk_category === null ? "gray" : "white",
                background: n.risk_category === 1 ? "#3D8E42" : n.risk_category === 2 ? "#A49F00" : n.risk_category === 3 ? "#FB0400" : n.risk_category === 4 ? "gray" : n.risk_category === null ? "gray" : "white",
                highlight: {
                    background: '#005B89',
                }
            },
            size: n.code_id === parseInt(Code ? Code : clientCode, 10) ? 16 : 14,
        }
    })
    console.log("nodesss", nodes, "real node", node, "code", Code)

    // const edges = graphe.map((i) => {
    //     return {
    //         from: i.emitter_code_id,
    //         to: i.receiver_code_id,
    //         color: {
    //             inherit: 'from',
    //         },
    //         smooth: {
    //             enabled: true,
    //             type: "continuous",
    //             roundness: 0.5
    //         },
    //         tag: "normal"
    //     }
    // }).concat(Object.values(node).filter(n => n.number_deposit > 0).map((n) => {
    //     return {
    //         "from": n.code_id,
    //         "to": n.code_id,
    //         "label": n.cash_deposit,
    //         tag: "deposit",
    //         width: 2,
    //         hoverWidth: 5,
    //         color: "orange",

    //     }
    // })).concat(Object.values(node).filter(n => n.number_withdrawal > 0).map((n) => {
    //     return {
    //         "from": n.code_id,
    //         "to": n.code_id,
    //         "label": n.cash_withdrawal,
    //         tag: "withdrawal",
    //         width: 2,
    //         color: "blue",
    //     }
    // }))
    // Étape 1: Identifier les nœuds avec des dépôts, des retraits, ou les deux
    const nodeWithBoth = {};
    Object.values(node).forEach((n) => {
        if (n.number_deposit > 0 && n.number_withdrawal > 0) {
            nodeWithBoth[n.code_id] = 'both';
        } else if (n.number_deposit > 0) {
            nodeWithBoth[n.code_id] = 'deposit';
        } else if (n.number_withdrawal > 0) {
            nodeWithBoth[n.code_id] = 'withdrawal';
        }
    });

    // Étape 2: Construire les arêtes
    const edges = graphe.map((i) => {

        return {
            from: i.emitter_code_id,
            to: i.receiver_code_id,
            width: 2,
            color: {
                inherit: 'from',
            },
            smooth: {
                enabled: true,
                type: "continuous",
                roundness: 0.5
            },

            tag: "normal"
        };
    }).concat(Object.values(node).map((n) => {
        if (nodeWithBoth[n.code_id] === 'deposit') {
            return {
                from: n.code_id,
                to: n.code_id,
                label: n.cash_deposit,
                tag: "deposit",
                width: 2,
                hoverWidth: 4,
                color: "orange",
            };
        } else if (nodeWithBoth[n.code_id] === 'withdrawal') {
            return {
                from: n.code_id,
                to: n.code_id,
                label: n.cash_withdrawal,
                tag: "withdrawal",
                width: 2,
                hoverWidth: 4,
                color: "blue",
            };
        } else if (nodeWithBoth[n.code_id] === 'both') {
            return {
                from: n.code_id,
                to: n.code_id,
                title: `Crédit ${n.cash_deposit} / Débit ${n.cash_withdrawal}`,
                tag: "both",
                width: 2,
                hoverWidth: 4,
                color: "black",
                arrows: "to, from"
            };
        } else {
            return null;
        }
    }).filter(edge => edge !== null));

    console.log(edges);
    const graph = {
        nodes,
        edges
    };
    const handleEdgeClick = (event) => {
        const edge = event.edges;
        if (edge.length > 0) {
            setOpe(true)
            const clickedEdge = edges.find((_edge) => _edge.id === edge[0]);
            if (clickedEdge.tag === "deposit") {
                // Arête de dépôt
                getTransaction(clickedEdge.from, clickedEdge.to, 1);
            } else if (clickedEdge.tag === "withdrawal") {
                // Arête de retrait
                getTransaction(clickedEdge.from, clickedEdge.to, -1);
            } else if (clickedEdge.tag === "both") {
                setBothFrom(clickedEdge.from)
                setBothTo(clickedEdge.to)
                // Arête du both
                getTransaction(clickedEdge.from, clickedEdge.to, 2);
            } else {
                // Arête normale
                getTransaction(clickedEdge.from, clickedEdge.to, 0);
            }
            setEmetteur(clickedEdge.from);
            setReceveur(clickedEdge.to);
            setTag(clickedEdge.tag)
            console.log("valeur from", clickedEdge.from);
            console.log(" tag", clickedEdge.tag);
        }
    };
    // const handleEdgeClick = (event) => {
    //     const edge = event.edges;
    //     if (edge.length > 0) {
    //         setOpe(true)
    //         const emet = edges.filter((_edge) => _edge.id === edge[0])[0].from
    //         const receiv = edges.filter((_edge) => _edge.id === edge[0])[0].to
    //         getTransaction(emet, receiv)
    //         setEmetteur(emet)
    //         setReceveur(receiv)
    //         console.log("valeur:", emet)

    //     }
    // };

    const events = {
        selectEdge: handleEdgeClick,
    };

    const options = {
        nodes: {
            font: {
        
                face: "verdana",
                color: "black"
            },
        },

        "physics": {
            "barnesHut": {
                "theta": 1,
                "gravitationalConstant": -18000,
                "centralGravity": 2.1,
                "springLength": 100,
                "springConstant": 0.03,
                "damping": 0.21,
                "avoidOverlap": 0.83
            },
            "maxVelocity": 54,
            "minVelocity": 0.22,
            "timestep": 0.71
        },
        interaction: { hover: true },
        edges: {
            "smooth": {
                "type": "curvedCCW",
                "forceDirection": "none",
                "roundness": 0.2
            },
            color: {
                hover: "black",
                opacity: 1.0,
            },

            smooth: {
                type: "curvedCCW",
                forceDirection: "none",
                roundness: 1
            }


        },
        height: "100%",
        width: "100%"

    };

    if (alert) {
        toast.warn(message, {
            position: "top-center",
            autoClose: 5000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "dark"
        });
        setAlert(false)
    }

    //     { 
    //         if (checkedItems[col.key])
    //         { return null } 
    //         return row[col["key"]]
    // }
    // }

    const columns = column.map((col) => {
        return {
            name: col.to_display,
            selector: (row) => row[col.key],
            omit: checkedItems[col.key] ? true : false


        };
    });

    const filteredColumns = columns.filter(col => !checkedItems[col.key]);
    const subHeaderComponentMemo = (
        <FilterComponent
            onFilter={(e) => setFilterText(e.target.value)}
            onClear={() => setFilterText("")}
            filterText={filterText}
        />
    );

    const filteredItems = transaction ? transaction.filter((item) =>
        Object.values(item).some(
            (value) =>
                typeof value === "string" &&
                value.toLowerCase().includes(filterText.toLowerCase())
        )
    ) : [];

    return (
        <>
            {/* Modal for transaction */}
            <Modal
                open={ope}
                onClose={handleClos}
                aria-labelledby="modal-modal-title"
                aria-describedby="modal-modal-description"
            >
                <Box sx={style}>
                    <Grid
                        container
                        direction="row"
                        justifyContent="space-between"
                        alignItems="flex-start"
                    >
                        <Accordion>
                            <AccordionSummary

                                aria-controls="panel3-content"
                                id="panel3-header"
                            >
                                Filtrer par colonne <FilterListIcon />
                            </AccordionSummary>
                            <AccordionDetails>
                                <FixedSizeList
                                    height={200}
                                    width={300}
                                    itemSize={46}
                                    itemCount={1}
                                    overscanCount={5}
                                >
                                    {returnColumn}
                                </FixedSizeList>
                            </AccordionDetails>

                        </Accordion>
                        <Grid
                            direction="row"
                            justifyContent="flex-end"
                            alignItems="flex-start"
                        >
                            {(bothFrom != null  || bothTo != null ) ? (
                                <>
                                    <Button
                                        variant="outlined"
                                        onClick={() =>{setTag("deposit");
                                         getTransaction(bothFrom, bothTo, 1);}}
                                         style={{
                                            backgroundColor: tag === "deposit" ? "red" : "grey",
                                            color: "white",
                                            opacity: tag === "deposit" ? 1 : 0.5
                                        }}                                    >
                                        filtrer par Crédit
                                    </Button>
                                    <Button
                                        sx={{ ml: 2 }}
                                        variant="outlined"
                                        onClick={() =>{setTag("withdrawal");
                                         getTransaction(bothFrom, bothTo, -1);}}
                                         
                                         style={{
                                            backgroundColor: tag === "withdrawal" ? "#FFC300" : "grey",
                                            color: "white",
                                            opacity: tag === "withdrawal" ? 1 : 0.5
                                        }}                                    >
                                        filtrer par Débit
                                    </Button>
                                </>
                            ) : ""}
                            <LoadingButton
                                sx={{ ml: 2 }}
                                loading={LoadDownload}
                                loadingPosition="start"
                                variant="outlined"
                                onClick={downloadFile} style={{ backgroundColor: "#274e13" }}><FileDownloadIcon style={{ color: "white" }} />
                            </LoadingButton>
                        </Grid>
                        <Grid
                            sx={{ mt: 7 }}
                            container
                            direction="column"
                            justifyContent="space-between"
                            alignItems="flex-start"
                        >
                            <DataTable
                                title="Détails des transactions"
                                columns={filteredColumns}
                                data={filteredItems}
                                pagination

                                progressPending={loadtable}
                                progressComponent={<FidgetSpinner
                                    backgroundColor="black"
                                    ballColors={["#EB2400", "red", "red"]}
                                    visible={loadtable}
                                    height="70"
                                    width="70"
                                    ariaLabel="fidget-spinner-loading"
                                    wrapperStyle={{}}
                                    wrapperClass="fidget-spinner-wrapper"

                                />}
                                paginationResetDefaultPage={resetPaginationToggle}
                                subHeader
                                fixedHeader
                                fixedHeaderScrollHeight="500px"
                                subHeaderComponent={subHeaderComponentMemo}

                            />
                        </Grid>
                    </Grid>
                </Box>
            </Modal>

            <Drawer
                anchor="right"
                open={open}
                onClose={handleClose}
                PaperProps={{
                    sx: { width: 370, border: 'none', overflow: 'hidden' },
                }}
            >
                <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ px: 1, py: 2 }}>
                    <Typography variant="subtitle1" sx={{ ml: 1 }}>
                        Paramettre de recherche
                    </Typography>
                    <IconButton onClick={handleClose}>
                        <Iconify icon="eva:close-fill" />
                    </IconButton>
                </Stack>

                <Divider />

                <Scrollbar>
                    <Stack spacing={8} sx={{ p: 3 }}>
                        <TextField sx={{ minWidth: 270 }}
                            fullWidth label="Code client"
                            id="fullWidth"
                            size="small"
                            value={clientCode}
                            // disabled={Code != "" ? true : false}
                            onChange={handleChangeCodeClient}
                        />

                      <Grid >
                            <p>Type client</p>
                            <Grid container
                                direction="row"
                                justifyContent="space-evenly"
                                alignItems="flex-start">
                                <b>S1 <Checkbox onChange={handleChangeRiskCategory} value={1} color="success" /></b>
                                <b>S2 <Checkbox onChange={handleChangeRiskCategory} value={2} color="warning" /></b>
                                <b>S3 <Checkbox onChange={handleChangeRiskCategory} value={3} color="error" /></b>
                                <b>hors <Checkbox onChange={handleChangeRiskCategory} value={4} style={{ color: "gray" }} /></b>

                            </Grid>
                        </Grid>

                        <FormControl sx={{ m: 1, minWidth: 270 }} size="small">
                            <InputLabel id="demo-select-small-label">Type d'opération</InputLabel>
                            <Select
                                labelId="demo-select-small-label"
                                id="demo-select-small"
                                value={direction}
                                label="Age"
                                onChange={handleChangeDirection}
                            >
                                <MenuItem value={1}>Credit</MenuItem>
                                <MenuItem value={-1}>Debit</MenuItem>
                            </Select>
                        </FormControl>


                        <FormControl sx={{ m: 1, minWidth: 270 }} size="small">
                            <InputLabel id="demo-select-small-label">Profondeur</InputLabel>
                            <Select
                                labelId="demo-select-small-label"
                                id="demo-select-small"
                                value={level}
                                label="Niveau"
                                onChange={handleChangeLevel}
                            >
                                <MenuItem value={1}>Niveau1</MenuItem>
                                <MenuItem value={2}>Niveau2</MenuItem>
                                <MenuItem value={3}>Niveau3</MenuItem>
                                <MenuItem value={4}>Niveau4</MenuItem>

                            </Select>
                        </FormControl>
                        <FormControl sx={{ m: 1, minWidth: 270 }} size="small">
                            <InputLabel id="demo-select-small-label">Poids de la transaction</InputLabel>

                            <Select
                                labelId="demo-select-small-label"
                                id="demo-select-small"
                                value={weight}
                                label="Niveau"
                                onChange={handleChangeWeight}
                            >
                                <MenuItem value={1}>Poids de la transaction</MenuItem>
                                <MenuItem value={0}>Top valeur</MenuItem>
                            </Select>
                        </FormControl>
                        <Box> <Typography id="non-linear-slider" gutterBottom>
                            Valeur: <b style={{ color: "#09954A" }}><i>{slide} {weight === 1 ? "%" : ""}</i></b>
                        </Typography><Slider sx={{ height: 40, color: "black" }}
                            defaultValue={1}
                            marks
                            min={1}
                            onChange={handleChangeSlide}
                            value={slide}
                            max={100} aria-label="Default" valueLabelDisplay="auto" />
                        </Box>
                        <Button onClick={fetchGraph} style={{ backgroundColor: '#000000', width: 300 }} variant="contained" endIcon={<SendIcon />}>
                            <b style={{ color: "red" }}>Lancer</b>
                        </Button>
                    </Stack>
                </Scrollbar>
            </Drawer>
            <Grid
                container
                direction="row"
                justifyContent="CENTER"
                alignItems="flex-start"
                style={{ position: "fixed", top: 'calc(100% / 7)', right: 'calc(100% / 4.2)', zIndex: 100 }}

            >
                {balance != null ? <Box component="section" sx={{ p: 2, border: '1px dashed grey' }}>
                    Solde Moyen du client : <b style={{ color: "red" }}>{fNumber(balance).replace(",", " ")} </b> <b>XOF</b>
                </Box> : ""}
                <Grid
                    container
                    direction="row"
                    justifyContent="flex-end"
                    alignItems="flex-start"
                    style={{ position: "fixed", top: 'calc(100% / 7)', right: 'calc(100% / 20)', zIndex: 100 }}
                >
                    {graphe.length > 0 ? <LoadingButton
                        loading={LoadDownloadGraph}
                        loadingPosition="start"
                        variant="outlined"
                        onClick={downloadGrapheFile} style={{ backgroundColor: "#274e13" }}><FileDownloadIcon style={{ color: "white" }} />
                    </LoadingButton> : ""}
                    <Button sx={{ ml: 2 }} variant="contained" style={{ backgroundColor: "black" }} onClick={handleOpen}>
                        {open ? <FilterAltOffTwoToneIcon style={{ color: "red" }} /> : <FilterAltTwoToneIcon style={{ color: "red", fontSize: 25 }} />}
                    </Button>

                </Grid>
            </Grid>
            <Grid container spacing={2}>
                <Grid item xs={12} md={12} lg={12}>
                    <Box
                        sx={{
                            // bgcolor: "background.paper",
                            bgcolor: "#ddd",
                            boxShadow: 7,
                            borderRadius: 1,
                            border: 1,
                            borderColor: "#e7e0e0",
                            height: "100vh"
                        }}
                        id="network"
                    >
                        {selectedEdge ?

                            <Grid
                                container
                                direction="column"
                                justifyContent="flex-start"
                                alignItems="baseline"
                            >
                                <Grid
                                    container
                                    direction="row"
                                    justifyContent="space-between"
                                    alignItems="flex-start"
                                >
                                    <Grid>
                                        to :
                                        <b sx={{ mt: 4, mb: 2 }}
                                            style={{ fontSize: "1em", color: "orange", fontFamily: 'Montserrat' }} >
                                            {`${selectedEdge.to} `}
                                        </b>
                                    </Grid>
                                    <Grid>
                                        from : <b sx={{ ml: 4, mb: 2 }}
                                            style={{ fontSize: "1em", color: "orange", fontFamily: 'Montserrat' }} >
                                            {` ${selectedEdge.from}`}
                                        </b>
                                    </Grid>


                                </Grid>
                            </Grid> : ""
                        }
                        <ToastContainer position="top-center"
                            autoClose={5000}
                            hideProgressBar={false}
                            newestOnTop={false}
                            closeOnClick
                            rtl={false}
                            pauseOnFocusLoss
                            draggable
                            pauseOnHover
                            theme="dark"
                        />

                        {loading ?
                            <Grid
                                container
                                direction="row"
                                justifyContent="center"
                                alignItems="center"
                            >
                                <Vortex
                                    visible={loading}
                                    height="80"
                                    width="200"
                                    ariaLabel="vortex-loading"
                                    wrapperStyle={{}}
                                    wrapperClass="vortex-wrapper"
                                    colors={['red', 'green', 'blue', 'yellow', 'orange', 'black']}
                                />
                            </Grid> :


                            <Graph graph={graph} options={options} events={events} />}
                    </Box>
                    <Box
                        sx={{
                            mt: 5,

                            bgcolor: "background.paper",
                            boxShadow: 7,
                            borderRadius: 1,
                            border: 1,
                            borderColor: "#e7e0e0",
                        }}
                    >

                        <center>
                            <b style={{ fontFamily: 'Montserrat' }}>
                                Légende
                            </b>
                        </center>
                        <Grid container sx={{ mt: 4, mb: 4 }}>
                            <Grid
                                container
                                direction="row"
                                justifyContent="space-around"
                                alignItems="flex-start"
                            >
                                <Grid justifyContent="flex-start" alignItems="flex-start">
                                    <StarOutlineIcon />
                                    <b>Forme du client recherché</b>

                                </Grid>
                                <Grid justifyContent="flex-start" alignItems="flex-start">
                                    <CircleRoundedIcon style={{ color: "green" }} />
                                    <b>Client S1</b>
                                </Grid>
                                <Grid justifyContent="flex-start" alignItems="flex-start">
                                    <CircleRoundedIcon style={{ color: "#A49F00" }} />
                                    <b>Client S2</b>
                                </Grid>
                                <Grid justifyContent="flex-start" alignItems="flex-start">
                                    <CircleRoundedIcon style={{ color: "red" }} />
                                    <b>Client S3</b>
                                </Grid>

                                <Grid justifyContent="flex-start" alignItems="flex-start">
                                    <CircleRoundedIcon style={{ color: "gray" }} />
                                    <b>Client Hors SGCI</b>
                                </Grid>
                            </Grid>
                        </Grid>
                    </Box>
                </Grid>
            </Grid >
        </>
    );
}
